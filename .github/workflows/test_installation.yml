name: Test Package Installation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
        install-method: ["pip", "poetry"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      if: matrix.install-method == 'poetry'
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install with Poetry
      if: matrix.install-method == 'poetry'
      run: poetry install --no-interaction
    
    - name: Install with pip
      if: matrix.install-method == 'pip'
      run: |
        python -m pip install --upgrade pip
        pip install -e .

  tests:
    needs: test-install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]  # Using latest Python version for tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install for testing
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install pytest pytest-cov

      # create config.yml (users are expected to created it)
      - name: Prepare test configuration
        run: |
          cp example_config.yaml config.yaml
      
      - name: Run tests
        run: |
          pytest tests/ --cov=src/ --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
